//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PrimitiveTypes: gồm các type sau đây
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import { EventHandler } from "react";

// 1. string
let varA: string = 'a';

// 2. number
let varB: number = 6.23;

// 3. bigint
let varC: bigint = BigInt("1111122233444556667878788");

// 4. boolean
let varD: boolean = false;

// 5. symbol
let varE: symbol = Symbol("abc");

// 6. null
let varF: null;

// 7. undefined
let varG: undefined;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Union Types
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let varTmpC: string | number;
varTmpC = 'a';
varTmpC = 20;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Array
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let varStrArr: string[];
let varUnArr: (string | number)[]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Dynamic type
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let varDyn: any;
varDyn = 2;
varDyn = 'ab';
varDyn = Symbol('abc');

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Literal Type
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let action: ('Insert' | 'Update' | 'Delete');
action = 'Insert';

/**
 * Một function mẫu sử dụng Literal type
 */
function handlingAction(action: ('Insert' | 'Update' | 'Delete')) {
  switch (action) {
    case "Insert":
      return 1;
    case "Update":
      return 2;
    case "Delete":
      return 3;
  }
}

handlingAction('Insert');

// let otherAction = 'Insert';
// // Type của otherAction là string (primitive type). Không phải là 'Insert' | 'Update' | 'Delete' (literal type)
// // Do đó phát sinh lỗi
// handlingAction(otherAction);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Object type
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Không cần từ khóa new... vì cú pháp đã tương đương với một object rồi
let myInfo: {
  name: string,
  age: number,
  gender: 'Male' | 'Female',
}

// Không cần khai báo key `note` do nó cho phép undefined
let myNewInfo: {
  name: string,
  age: number,
  gender: 'Male' | 'Female',
  note?: string
} = {
  name: 'Nguyen',
  age: 20,
  gender: 'Male'
}

// Key address có type là một Object
let myOtherInfo: {
  name: string
  age: number,
  gender: 'Male' | 'Female',
  address: {
    city: string,
    district: string,
    ward: string,
    detailAddress?: string
  }
  note?: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// enum
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum Gender {
  MALE,
  FEMALE,
  OTHER
}

let myGender: Gender = Gender.MALE;

let myGen = 1 as Gender
console.log(myGen);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Tuples
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

let currentProduct: [string, string, number]
currentProduct = ["P01", "Ti-vi", 20000]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Functions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let onChangeData: () => void

let onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void

onClick = (event) => {
  event.preventDefault();
  console.log(event.currentTarget.value);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Type Alias
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Định nghĩa UserInfo - Type Alias
type UserInfo = {
  name: string
  age: number,
  gender: Gender,
  address: {
    city: string,
    district: string,
    ward: string,
    detailAddress?: string
  }
  note?: string
}

// Sử dụng type cho việc khai báo biến
let newUser: UserInfo


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

interface Vehicle {
  name: string;
  modelName: string;
  type: 'Bicycle' | 'Motor' | 'Car';
  color: string;
  hasEgine: boolean;
  numberOfWheel: number;
}
// Mở rộng thêm thuộc tính cho vehicle
interface Vehicle {
  isAccepted?: boolean;
}

let myVehicle: Vehicle;

// interface kế thừa interface
interface Car extends Vehicle {
  numberOfDoors: number;
  isElectric: boolean;
}
// Type Alias kế thừa interface
type Motor = Vehicle & {
  numberOfDoors: number;
}

let myCar: Car = {
  name: 'My car',
  modelName: 'Volvo Type ABC',
  type: 'Car',
  color: 'Red',
  hasEgine: true,
  numberOfWheel: 4,
  numberOfDoors: 4,
  isElectric: false,
  getPrice: (modelName) => modelName === "Volvo"? 1000 : 2000,
  getOtherPrice: function(modelName) {
    return modelName === "Volvo"? 1000 : 2000;
  }
}

myCar.name = 'A2'
myCar.modelName = 'A'

// Các cách khai báo key là một function
// Với cách khai báo thứ hai thì không thể thiết lập key là undefined
interface Car {
  getPrice?: (modelName: string) => number; 
  getOtherPrice(modelName: string): number;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Generic
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Action = {
  doLogging<T>(act: T): void;
}

const actionTmp: Action = {
  doLogging: function<T>(act: T) {
    switch(typeof(act)){
      case 'number':
        console.log(`Number: ${act.toString()}`);
        return;
      case 'string':
        console.log(`String: ${act.toString()}`);
        return;
      default:
        console.log(`Unknown value`);
        return;
    }
  }
}